<?php 
					/*
			 * For each lifegroups entry in values.php
			 */
				foreach ($lifegroups as $lifegroup) {
					$lfg = strtolower($lifegroup);
					echo '<label><input id="'  .$lfg.  '" value="'.$lfg.'" type="radio" class="" />&nbsp;'.$lifegroup.'</label><br />';
				}
			?>
			
			
			
public function createAccount() {
        $b = trim($_POST['branchname']);
        $f = trim($_POST['branchfrom']);
		$c = trim($_POST['branchcommonname']);

        $sql = "SELECT COUNT(username) AS theCount FROM marine_users WHERE username=:email";
        if ( $stmt = $this->_db->prepare($sql) ) {
            $stmt->bindParam(":email", $u, PDO::PARAM_STR);
            $stmt->execute();
            $row = $stmt->fetch();
            if($row['theCount']!=0) {
                return "<h2> Error </h2>" . "<p> Sorry, that email is already in use. " . "Please try again. </p>";
            }
            if ( !$this->sendVerificationEmail($u, $v) ) {
                return "<h2> Error </h2>" . "<p> There was an error sending your" . " verification email. Please " . "<a href='mailto:help@coloredlists.com'>contact " . "us</a> for support. We apologize for the " . "inconvenience. </p>";
            }
            $stmt->closeCursor();
        }

        $sql = "INSERT INTO marine_users(username, ver_code) VALUES(:email, :ver)";
        if ( $stmt = $this->_db->prepare($sql) ) {
            $stmt->bindParam(":email", $u, PDO::PARAM_STR);
            $stmt->bindParam(":ver", $v, PDO::PARAM_STR);
            $stmt->execute();
            $stmt->closeCursor();

            $userID = $this->_db->lastInsertId();
            $url = dechex($userID);

            /*
             * If the UserID was successfully
             * retrieved, create a default list.
             */
            $sql = "INSERT INTO marine_lists (UserID, ListURL) VALUES ($userID, $url)";
            if(!$this->_db->query($sql)) {
                return "<h2> Error </h2>" . "<p> Your account was created, but " . "creating your first list failed. </p>";
            } else {
                return "<h2> Success! </h2>" . "<p> Your account was successfully " . "created with the username <strong>$u</strong>." . " Check your email!";
            }
        } else {
            return "<h2> Error </h2><p> Couldn't insert the " . "user information into the database. </p>";
        }
    }
    
    
    
    
*************************    Make spaces to one only inside
    
    <?

$text = preg_replace('/\s+/', ' ', $text);

?>




************************* Get join date


*******************Table for fishes SQL

	CREATE TABLE mlf_fish (
        fid INT AUTO_INCREMENT PRIMARY KEY,
		fstatus TINYINT DEFAULT 1,
        falias VARCHAR(150) NOT NULL,
        
		fcname VARCHAR(150) NOT NULL,
		fothercnames VARCHAR(150) NOT NULL,
		fbinomialfirst VARCHAR(150) NOT NULL,
		fbinomiallast VARCHAR(150) NOT NULL,
		ftaxon VARCHAR(150) NOT NULL,
		
		fsummary VARCHAR NOT NULL,
		fcontent TEXT NOT NULL,
		
		fprimarycolors VARCHAR(150) NOT NULL,
		fsecondarycolors VARCHAR(150) NOT NULL,
		
		fgeneralshape VARCHAR(150) NOT NULL,
		fsize SMALLINT NOT NULL,
		fbodyrings TINYINT NOT NULL,
		
		fabvertebraes SMALLINT NOT NULL,
		fcavertebraes VARCHAR(150) NOT NULL,
		
		fheadshape VARCHAR(80) NOT NULL,
		fheadsize VARCHAR(50) NOT NULL,
		
		fmouthshape VARCHAR(150) NOT NULL,
		fmouthposition VARCHAR(40) NOT NULL,
		fmouthsizetohead VARCHAR(40) NOT NULL,
		fmouthreltoeyes VARCHAR(30) NOT NULL,
		fmouthteethvis TINYINT NOT NULL,
		
		feyessizetohead VARCHAR(30) NOT NULL,
		feyesposition VARCHAR(30) NOT NULL,
		
		flaterallineshape VARCHAR(100) NOT NULL,
		flaterallinespores TINYINT NOT NULL,
		
		foperculums VARCHAR(40) NOT NULL,
		fholes TINYINT NOT NULL,
		fslits TINYINT NOT NULL,
		
		fscalessize VARCHAR(40) NOT NULL,
		fscalestype VARCHAR(30) NOT NULL,
		flateralscales TINYINT NOT NULL,
		ftraversescalesover TINYINT NOT NULL,
		ftraversescalesunder TINYINT NOT NULL,
		fpredorsalscales TINYINT NOT NULL,
		
		fupperarmsrakers TINYINT NOT NULL,
		flowerarmsrakers TINYINT NOT NULL,
		
		fdorsalfinshape VARCHAR(150) NOT NULL,
		fdorsalfinretractable TINYINT NOT NULL,
		fdorsalfinspines TINYINT NOT NULL,
		fdorsalfinrays TINYINT NOT NULL,
		
		fcaudalfinshape VARCHA(150) NOT NULL,
		fcaudalfintype VARCHA(30) NOT NULL,
		fcaudalfinspines TINYINT NOT NULL,
		fcaudalfinrays TINYINT NOT NULL,
		
		fanalfinsshape VARCHAR(100) NOT NULL,
		fanalfinsspines TINYINT NOT NULL,
		fanalfinsrays TINYINT NOT NULL,
		
		fpelvicfinsshape
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		fpageurl VARCHAR (150) NOT NULL,
		fcreated INT UNSIGNED NOT NULL,
		fmodified INT UNSIGNED NOT NULL,
		fusername VARCHAR(50) NOT NULL
);




